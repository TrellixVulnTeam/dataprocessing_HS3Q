{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/service1.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction UpdComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 7);\n    i0.ɵɵelementStart(2, \"label\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const a_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", a_r2.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(a_r2.title);\n  }\n}\n\nexport let UpdComponent = /*#__PURE__*/(() => {\n  class UpdComponent {\n    constructor(service) {\n      this.service = service;\n      this.instrumentList = [];\n    }\n\n    ngOnInit() {\n      this.getRest();\n    }\n\n    getRest() {\n      this.service.getRest().subscribe(rest1 => {\n        this.instrumentList = rest1._embedded.instruments;\n      });\n    }\n\n    onSelect(instrument) {\n      this.selectedItem = instrument;\n    }\n\n    updateRest(instrument) {\n      this.service.putRest(this.selectedItem._links.self.href, instrument).subscribe(() => {\n        this.getRest();\n      });\n    }\n\n  }\n\n  UpdComponent.ɵfac = function UpdComponent_Factory(t) {\n    return new (t || UpdComponent)(i0.ɵɵdirectiveInject(i1.Service1Service));\n  };\n\n  UpdComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdComponent,\n    selectors: [[\"app-upd\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"updform\", 3, \"ngSubmit\"], [\"form1\", \"ngForm\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Title\", \"name\", \"title\", \"ngModel\", \"\"], [\"type\", \"text\", \"placeholder\", \"Info\", \"name\", \"info\", \"ngModel\", \"\"], [\"type\", \"number\", \"min\", \"1\", \"max\", \"5000\", \"placeholder\", \"Price\", \"name\", \"price\", \"ngModel\", \"\"], [\"type\", \"update\", \"value\", \"Update\", 1, \"updbutton\"], [\"type\", \"radio\", \"name\", \"id\", \"ngModel\", \"\", 3, \"value\"], [\"for\", \"id\"]],\n    template: function UpdComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"form\", 0, 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdComponent_Template_form_ngSubmit_0_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(1);\n\n          return ctx.updateRest(_r0.value);\n        });\n        i0.ɵɵtemplate(2, UpdComponent_div_2_Template, 4, 2, \"div\", 2);\n        i0.ɵɵelement(3, \"input\", 3);\n        i0.ɵɵelement(4, \"input\", 4);\n        i0.ɵɵelement(5, \"input\", 5);\n        i0.ɵɵelement(6, \"input\", 6);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.instrumentList);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i3.NgForOf, i2.RadioControlValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i2.MinValidator, i2.MaxValidator, i2.NumberValueAccessor],\n    styles: [\".updform[_ngcontent-%COMP%]{display:grid;grid-template-rows:auto;padding:20px;margin-top:10px;width:200px;height:-moz-fit-content;height:fit-content;background-color:#f5f5f5}input[type=update][_ngcontent-%COMP%]:focus{background-color:#03a8f4b6;cursor:pointer;border-radius:20px;color:#fff;box-shadow:0 10px 20px #0000001a}\"]\n  });\n  return UpdComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}